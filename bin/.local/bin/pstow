#!/usr/bin/python3

from argparse import ArgumentParser
from pathlib import Path
from sys import argv
from typing import List, Literal

parser = ArgumentParser(
    prog="pstow",
    add_help=False,
    description="Like `stow`, but with snakes.",
)

arguments = parser.add_argument_group("Arguments")

arguments.add_argument(
    "source",
    type=Path,
    nargs="+",
    help="Source package directory.",
)
arguments.add_argument(
    "target",
    type=Path,
    help="Package installation target.",
)

flags = parser.add_argument_group("Flags")

flags.add_argument(
    "--simulate",
    help="Do not actually make any changes.",
    action="store_true",
)

actions = parser.add_argument_group("Actions")
actions = actions.add_mutually_exclusive_group(required=True)

actions.add_argument(
    "--help",
    action="help",
    help="Show this help message and exit.",
)
actions.add_argument(
    "--stow",
    action="store_true",
    help="Installs the packages that follow this option.",
)
actions.add_argument(
    "--unstow",
    action="store_true",
    help="Removes the packages that follow this option.",
)

conflicts = parser.add_argument_group("Conflict resolution")
conflicts = conflicts.add_mutually_exclusive_group(required=False)

conflicts.add_argument(
    "--adopt",
    help="Imports existing files into the package from the target.",
    action="store_true",
)
conflicts.add_argument(
    "--force",
    help="If a existing destination file exists, overwrite it.",
    action="store_true",
)


# import click
# from click import Choice


# @click.group()
# def main():
#     pass


# @main.command()
# @click.option("--source", type=Path, required=True)
# @click.option("--target", type=Path, required=True)
# @click.option(
#     "--conflicts",
#     type=Choice(["panic", "ignore", "overwrite", "adopt"]),
#     default="panic",
# )
# def stow(
#     source: Path,
#     target: Path,
#     conflicts: Literal["panic", "ignore", "overwrite", "adopt"],
# ):
#     source = Path(source).resolve()

#     for file in source.glob("**/*"):
#         if file.is_dir():
#             continue

#         relative = file.relative_to(source)
#         if (target / relative).samefile(source / relative):
#             print(relative)


if __name__ == "__main__":
    print(parser.parse_args(argv[1:]))
